{"mappings":"AAyBgE,MAA1DA,EAAOC,SAASC,cAAc,SAKbD,SAASC,cAAc,UAE9CF,EAAKG,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,MAAOC,UAAUC,MAAGA,EAAKC,KAAEA,IAAUJ,EAAMK,cAE3CC,QAAQC,IAAI,WAAYJ,EAAMK,gBAAgBJ,EAAKI,SACnDR,EAAMK,cAAcI","sources":["src/js/03-promises.js"],"sourcesContent":["// В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в\n//  миллисекундах, шаг увеличения задержки для каждого промиса после первого и количество промисов\n//   которое необходимо создать.\n\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay)\n//  столько раз, сколько ввели в поле amount. При каждом вызове передай ей номер создаваемого\n//   промиса (position) и задержку учитывая введенную пользователем первую задержку (delay) и шаг (step).\n\nconst form = document.querySelector(\".form\");\n\n// const firstDelay = document.querySelector('[name=\"delay\"]');\n// const delayStep = document.querySelector('[name=\"step\"]');\n// const amountInput = document.querySelector('[name=\"amount\"]');\nconst promisesButton = document.querySelector('button');\n\nform.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const {elements: {  delay, step }} = event.currentTarget;\n\n  console.log(` delay: ${ delay.value}, step: ${step.value}`);\n  event.currentTarget.reset();\n}\n\n\n\n\n// let delay = '';\n\n// promisesButton.addEventListener('submit', onDelayInput )\n\n// function onDelayInput (event) {\n//     delay = event.currentTarget.value;\n//     console.log('delay', delay);\n   \n// }\n\n\n// let step = '';\n// delayStep.addEventListener('input', onStepInput)\n// function onStepInput (event) {\n//     step = event.currentTarget.value;\n//     console.log('step', step);\n// } \n// onStepInput()\n\n\n// let amount = '';\n// amountInput.addEventListener('input', onAmountInput)\n// function onAmountInput (event) {\n//     amount = event.currentTarget.value;\n//     console.log('amount', amount);\n// } \n// onAmountInput()\n\n\n\n\nfunction createPromise(position, delay) {\n\n  return new Promise ((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n\n  \n   setTimeout(() => {\n      if (shouldResolve) {\n       \n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    // Fulfill \n  } else {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    // Reject\n  }\n   }, delay.value)\n  })\n\n}\n\n\n// function funcBefore(){\n//   intervalId = null;\n\n//   intervalId = setInterval(function createPromise(){\n\n \n//    clearInterval(intervalId);\n\n//  funcBefore();\n// }, amount);\n// clearInterval(intervalId);\n// }\n\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$47d4ff9957288465$var$form","document","querySelector","addEventListener","event","preventDefault","elements","delay","step","currentTarget","console","log","value","reset"],"version":3,"file":"03-promises.68b9c784.js.map"}