{"mappings":"YAiBA,SAASA,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAYtC,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAACN,SAASA,EAAUC,MAAMA,IAElCM,EAAO,CAACP,SAASA,EAAUC,MAAMA,MAElCA,MA1BMQ,SAASC,cAAc,QAE/BC,iBAAiB,UAAU,SAACC,IAC/BA,EAAGC,iBACAD,EAAGE,cAAcC,aAAa,aA4BnC,SAAoBC,GACKA,EAAlBhB,SAAL,IAAeiB,EAAQD,EAARE,KACTC,EAAQF,EAAKG,SACbC,EAASC,SAASH,EAAc,OAAEI,MAAM,IACxCC,EAAQF,SAASH,EAAa,MAAEI,MAAM,IACtCE,EAAOH,SAASH,EAAY,KAAEI,MAAM,IACtCG,EAAYD,EAChBR,EAAKU,aAAa,UAAU,QAC5BD,EAAYF,EAMZ,IALA,IAKSI,EAAI,EAAGA,EAAIP,EAAQO,IAAI,CACd7B,EAAc6B,EAAE,EAAGF,GAC3BG,MAAK,SAACC,GACZ,IAAO9B,EAAmB8B,EAAnB9B,SAAUC,EAAS6B,EAAT7B,MACjB8B,QAAQC,IAAI,uBAAwCC,OAAfjC,EAAS,QAAYiC,OAANhC,EAAM,UAG3DiC,OAAM,SAACJ,GACN,IAAO9B,EAAmB8B,EAAnB9B,SAAUC,EAAS6B,EAAT7B,MACjB8B,QAAQC,IAAI,sBAAqCC,OAAfjC,EAAS,QAAYiC,OAANhC,EAAM,UAGzDyB,GAAaD,GA9CfU,CAJa,CACXnC,SAAU,EACVkB,KAAMN,EAAGE,mB","sources":["src/js/03-promises.js"],"sourcesContent":["\nconst form = document.querySelector('form')\n\nform.addEventListener(\"submit\", (ev) => {\n  ev.preventDefault()\n  if(ev.currentTarget.getAttribute(\"pending\")){\n    return\n  }\n  \n  const data = {\n    position: 1,\n    form: ev.currentTarget\n  }\n  doPromises(data)\n\n})\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position:position, delay:delay});\n      } else {\n        reject({position:position, delay:delay});\n      }\n    }, delay);\n  });\n\n  return promise;\n}\n\nfunction doPromises(data){\n  let {position, form} = data\n  const elems = form.elements\n  const amount = parseInt(elems['amount'].value,10)\n  const delay = parseInt(elems['delay'].value,10)\n  const step = parseInt(elems['step'].value,10)\n  let currDelay = step\n  form.setAttribute(\"pending\",\"true\")\n  currDelay = delay\n  const unblocking = (position) =>{\n    if(position === amount){\n      form.removeAttribute(\"pending\")\n    }\n  }\n  for (let i = 0; i < amount; i++){\n    const promise = createPromise(i+1, currDelay)\n    promise.then((data) => {\n      const {position, delay} = data\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n    \n    })\n    .catch((data) => {\n      const {position, delay} = data\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`)\n    \n    })\n    currDelay += step\n  }\n\n\n}\n"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","ev","preventDefault","currentTarget","getAttribute","data1","form1","form","elems","elements","amount","parseInt","value","delay1","step","currDelay","setAttribute","i","then","data","console","log","concat","catch","$ce04d3a99e08e73b$var$doPromises"],"version":3,"file":"03-promises.5c911742.js.map"}